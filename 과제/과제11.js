const arr = [1, 3, 5, -3, 9, 10, 23, -6, 44, 22, -10, 5, 20];
for (let i = 0; i < arr.length; i++) {
  console.log(arr[i]);
}

// 방법 2: for...of 반복문 사용
for (let num of arr) {
  //for (let value of 반복 가능한 자료형) //배열, 문자열, 집합에서 사용가능
  console.log(num);
}

// 방법 3: forEach 메서드 사용
// for (arr.forEach) {
//   newArr = arr.forEach
// console.log(newArr)
// }

// 배열 원소 출력
// 변수 arr 을 선언하고, 아래 배열을 할당한다.
// [1, 3, 5, -3, 9, 10, 23, -6, 44, 22, -10, 5, 20]
for (let i = 1; i < arr.length; i--) {
  console.log(arr[i]);
}
//[1, 2, 3]; //3  : 2   =1

// 배열을 거꾸로 순회하고 싶다
// 배열의 값을 찾을 때 인덱스로 찾는다
// for 시작값이 배열의 최대 인덱스면 좋겠다.
// 배열의 최대 인덱스 === 배열의 길이 - 1
// 배열의 길이 -1 의 값이 최대 인덱스 값이므로
// for 시작값이 배열의 길이 - 1
// 0이 될때가지 반복
// 순회를 할 때마다 시작값은 하나식 뺀다 => 시작값--

// 배열 원소 거꾸로 출력
// 변수 arr 을 선언하고, 아래 배열을 할당한다.
// [1, 3, 5, -3, 9, 10, 23, -6, 44, 22, -10, 5, 20]
for (let num of arr) {
  if (i = 0; i>0;)
    console.log(num)
}
// forEach 배열의 모든 요소를 호출
// 양수 출력
// 변수 arr 을 선언하고, 아래 배열을 할당한다.
// [1, 3, 5, -3, 9, 10, 23, -6, 44, 22, -10, 5, 20]

for (

)
// fliter 주어진 조건을 만족하는 요소만을 포함하는 새로운 배열을 생성하는데 사용
// 새로운 배열
// 변수 arr 을 선언하고, 아래 배열을 할당한다.
// [1, 3, 5, -3, 9, 10, 23, -6, 44, 22, -10, 5, 20]
// ​
// 배열의 원소 중 양수이면서 짝수인 원소만 모아서 새로운 배열을 만들어서 출력한다.
// 실행 결과
// [ 10, 44, 22, 20 ]

const product = arr.reduce((acc, num) => acc * num, 1);
console.log(product);

// reduce 배열의 각 요소에 대해 주어진 함수를 실행하여 단일 결과값을 생성하는 데 사용 된다.
// 배열 원소의 곱
// 변수 arr 을 선언하고, 아래 배열을 할당한다.
// [1, 3, 5, -3, 9, 10, 23, -6, 44, 22, -10, 5, 20]
// ​
// 배열의 모든 원소를 곱한 값을 출력한다.
// 실행 결과
// -541015200000

let lastOdd;

for (const num of arr.reverse()) {
  if (num % 2 !== 0) {
    lastOdd = num;
    break;
  }
}

console.log(lastOdd);

// reverse 배열의 요소를 반전
// 마지막 홀수
// 변수 arr 을 선언하고, 아래 배열을 할당한다.
// [1, 3, 5, -3, 9, 10, 23, -6, 44, 22, -10, 5, 20]
// ​
// 배열의 원소 중 마지막으로 나온 홀수의 값을 출력한다.
// 실행 결과
// 5

// 변수 x 선언 및 임의의 숫자 할당
const x = 5;
console.log(x);

// 배열 선언
const arr = [1, 3, 5, -3, 9, 10, 23, -6, 44, 22, -10, 5, 20];

// x보다 큰 값만 새로운 배열에 추가
const greaterThanX = arr.filter((num) => num > x);
console.log(greaterThanX);

// x 보다 큰 값
// 변수 x 를 선언하고, 임의의 숫자값을 할당한다.
// 변수 x 를 출력한다.
// 변수 arr 을 선언하고, 아래 배열을 할당한다.
// [1, 3, 5, -3, 9, 10, 23, -6, 44, 22, -10, 5, 20]
// ​
// 배열의 원소 중 변수 x 보다 큰 원소만 모아서 새로운 배열 을 만들어서 출력한다.
// 실행 결과
// 5
// [ 9, 10, 23, 44, 22, 20 ]
